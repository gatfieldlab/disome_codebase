source("rustr.R")
source("geneticcode")
library("geneticcode")
geneticcode::aminoacids
geneticcode::aminoacids_1l
aminoacids_1l
deduce_nuc_seq("A")
library("randomcoloR")
library(gplots)
colorpanel(61)
install.packages("randomcoloR")
library("randomcoloR)
source("rustr.R")
filter.rust <- function(x, frequency_threshold = 0.1,
                        significance_threshold = 0.05) {
  stopifnot(class(x) == "rust")
  frequency_cutoff <- quantile(x$frequency$counts, p = frequency_threshold)
  candidates <- rownames(x$frequency)[x$frequency$counts <= frequency_cutoff]
  significance <- p.adjust(test.rust(x))
  names(significance) <- x$words
  leave_out <- candidates[significance[candidates] >= significance_threshold]
  x$words[! x$words %in% leave_out]
}
rust_data <- read.rust("di_6mer/RUST_6mer_12-Jun-18_11.37")
subwords <- filter.rust(rust_data)
lenght(subwords)
length(subwords)
length(rust_data$words)
rust_data <- read.rust("di_9mer/RUST_9mer_12-Jun-18_11.37")
subwords <- filter.rust(rust_data)
summary(rust_data$present)
summary(rowSums(rust_data$present))
which(rowSums(rust_data$present) == 0)
rust_data$ratios["TTTTCCGCG",]
rust_data$present["TTTTCCGCG",]
chisq.test(c(0,0),)
names0 <- c("A", "B", "C")
l
list(names0 = NA)
rep(1,2)
rep(1,4)
rep(NA,3)
names(rep(NA,3)) <- names0
l <- rep(NA,3)
names(l)
names(l) <- names0
l
test.rust <- function(x, words_subset = NULL, ...) {
  if (!is.null(words_subset)) {
    words <- intersect(words_subset, x$words)
  } else {
    words <- x$words
  }
  words0 <- words[rowSums(x$present[words,]) == 0]
  words <- setdiff(words, words0)
  no <- x$present[words, ] - x$observed[words, ]
  pvals <- unlist(lapply(words, function(word) {
     chisq.test(cbind(no[word, ], x$observed[word, ]), ...)$p.value
  }))
  names(pvals) <- words
  excluded <- rep(NA, length(words0))
  names(excluded) <- words0
  c(pvals, excluded)
}
subwords <- filter.rust(rust_data)
length(subwords)
length(rust_data$words)
plot.rust(rust_data, words_subset=subwords)
dev.off()
plot.rust(rust_data, words_subset=subwords)
dev.off()
head(subwords)
plot.rust(rust_data, words_subset=subwords[1:10])
dev.off()
rust_data$frequency["AAAAAAAAA",]
rust_data$frequency["AAAAAAAAA"]
rust_data$present["AAAAAAAAA",]
rust_data$observed["AAAAAAAAA",]
rust_data$observed["AAAAAAACG",]
rust_data$frequency["AAAAAAACG",]
quantile(rust_data$frequency$counts)
quantile(rust_data$frequency$counts, 0.1)
source("rustr.R")
subwords <- filter.rust(rust_data, hard_threshold=20)
length(subwords)
plot.rust(rust_data, words_subset=subwords)
dev.off()
length(rust_data$words)
subwords <- filter.rust(rust_data, hard_threshold=30, significance_threshold=0.01)
source("rustr.R")
subwords2 <- filter.rust(rust_data, hard_threshold=30, significance_threshold=0.01)
source("rustr.R")
subwords2 <- filter.rust(rust_data, hard_threshold=30, significance_threshold=0.01)
summary(subwords2 == subwords)
plot.rust(rust_data, words_subset=subwords)
dev.off()
quantile(rust_data$frequency$counts)
length(rust_data$words)
length(rust_data$words) / 4
summary(rust_data$ratios[subwords,])
apply(rust_data$ratios[subwords,], 1, function(x) any(x == 0))
summary(apply(rust_data$ratios[subwords,], 1, function(x) any(x == 0)))
c(0,1,1,1,0,1,1,1)
any(c(0,1,1,1,0,1,1,1) == 0)
count.fields(c(0,1,1,1,0,1,1,1) == 0)
summary(c(0,1,1,1,0,1,1,1) == 0)
summary(c(0,1,1,1,0,1,1,1) == 0)[2]
summary(c(0,1,1,1,0,1,1,1) == 0)[3]
sum(c(0,1,1,1,0,1,1,1) == 0)
table(apply(rust_data$ratios[subwords,], 1, function(x) sum(x == 0)))
which(apply(rust_data$ratios[subwords,], 1, function(x) sum(x == 0)) == 50)
rust_data$ratios["TTTTGCGTA",]
rust_data$frequency["TTTTGCGTA",]
"TTTTGCGTA" %in% subwords
source("rustr.R")
subwords2 <- filter.rust(rust_data, hard_threshold=30, significance_threshold=0.01)
summary(subwords2 == subwords)
"TTTTGCGTA" %in% subwords
test.rust(rust_data, words_subset=c("TTTTGCGTA"))
test.rust(rust_data, words_subset=c("TTTTGCGTA", "TTTTGCGTT"))
subwords2[1:10]
test.rust(rust_data, words_subset=c("TTTTGCGTA", subwords[1:10]))
filter.rust <- function(x, frequency_threshold = 0.1,
                        hard_threshold = 0,
                        significance_threshold = 0.05) {
  stopifnot(class(x) == "rust")
  frequency_cutoff <- quantile(x$frequency$counts, p = frequency_threshold)
  cutoff <- max(hard_threshold, frequency_cutoff)
  candidates <- rownames(x$frequency)[x$frequency$counts <= cutoff]
  significance <- p.adjust(test.rust(x))
  leave_out <- candidates[!is.na(significance[candidates]) &
                          significance[candidates] >= significance_threshold]
  setdiff(x$words, leave_out)
}
subwords2 <- filter.rust(rust_data, hard_threshold=30, significance_threshold=0.01)
filter.rust <- function(x, frequency_threshold = 0.1,
                        hard_threshold = 0,
                        significance_threshold = 0.05) {
  stopifnot(class(x) == "rust")
  frequency_cutoff <- quantile(x$frequency$counts, p = frequency_threshold)
  cutoff <- max(hard_threshold, frequency_cutoff)
  candidates <- rownames(x$frequency)[x$frequency$counts <= cutoff]
  significance <- p.adjust(test.rust(x))
  leave_out <- candidates[is.na(significance[candidates]) |
                          significance[candidates] >= significance_threshold]
  setdiff(x$words, leave_out)
}
subwords2 <- filter.rust(rust_data, hard_threshold=30, significance_threshold=0.01)
summary(subwords2 == subwords)
summary(subwords2 %in% subwords)
summary(subwords %in% subwords2)
length(subwords2)
length(subwords)
"TTTTGCGTA" %in% subwords2
plot.rust(rust_data, words_subset=subwords2)
dev.off()
which(apply(rust_data$ratios[subwords,], 1, function(x) sum(x == 0)) == 50)
which(apply(rust_data$ratios[subwords2,], 1, function(x) sum(x == 0)) == 50)
which(apply(rust_data$ratios[subwords2,], 1, function(x) sum(x == 0)) == 49)
which(apply(rust_data$ratios[subwords2,], 1, function(x) sum(x == 0)) == 48)
which(apply(rust_data$ratios[subwords2,], 1, function(x) sum(x == 0)) == 47)
which(apply(rust_data$ratios[subwords2,], 1, function(x) sum(x == 0)) == 46)
which(apply(rust_data$ratios[subwords2,], 1, function(x) sum(x == 0)) == 10)
rust_data$observed["TGTTCTCAG",]
rust_data$frequency$counts["TGTTCTCAG",]
rust_data$frequency$counts["TGTTCTCAG"]
head(rust_data$frequency$counts)
head(rust_data$frequency)
rust_data$frequency["TGTTCTCAG",]
test.rust(rust_data, words_subset=c("TGTTCTCAG", "TGTTCTCAC"))
plot.rust(rust_data, words_subset=c("TGTTCTCAG", "TGTTCTCAC"))
dev.off()
"TGTTCTCAC" %in% subwords2
no <- rust_data$present["TGTTCTCAG",] - rust_data$observed["TGTTCTCAG",]
no
chisq.test(cbind(no, rust_data$observed["TGTTCTCAG",])
)
chisq.test(cbind(no, rust_data$observed["TGTTCTCAG",]), correct=TRUE)
chisq.test(cbind(no, rust_data$observed["TGTTCTCAG",]), simulate.p.value=TRUE)
cbind(no, rust_data$observed["TGTTCTCAG",])
fisher.test(cbind(no, rust_data$observed["TGTTCTCAG",]))
cbind(no, rust_data$observed["TGTTCTCAG",])
summary(cbind(no, rust_data$observed["TGTTCTCAG",]) == 0)
summary(cbind(no, rust_data$observed["TGTTCTCAG",]) >= 5)
5 * 50 * .8
names(rowSums(rust_data$observed) < 200))
names(rowSums(rust_data$observed) < 200)
filter.rust <- function(x, quantile_threshold = 0.05,
                        frequency_threshold = 0,
                        observed_threshold = 0,
                        significance_threshold = 0.05) {
  stopifnot(class(x) == "rust")
  quantile_cutoff <- quantile(x$frequency$counts, p = quantile_threshold)
  cutoff <- max(quantile_threshold, frequency_threshold)
  freq_failed <- rownames(x$frequency)[x$frequency$counts <= cutoff]
  obs_failed <- names(rowSums(x$observed) <= observed_threshold)
  candidates <- union(freq_failed, obs_failed)
  significance <- p.adjust(test.rust(x))
  leave_out <- candidates[is.na(significance[candidates]) |
                          significance[candidates] >= significance_threshold]
  setdiff(x$words, leave_out)
}
subwords3 <- filter.rust(rust_data, observed_threshold=50, significance_threshold=0.01)
length(subwords3)
plot.rust(rust_data, words_subset=subwords3)
dev.off()
head(subwords3)
no <- rust_data$present["AAAAAGAAG",] - rust_data$observed["AAAAAGAAG",]
chisq.test(cbind(no, rust_data$observed["AAAAGAAG",]))
rust_data$observed["AAAAAGAAG",]
chisq.test(cbind(no, rust_data$observed["AAAAAGAAG",]))
head(subwords3)
names(rowSums(rust_data$observed[subwords3,]) < 60))
names(rowSums(rust_data$observed[subwords3,]) < 60)
no <- rust_data$present["TGTGATAAA",] - rust_data$observed["TGTGATAAA",]
chisq.test(cbind(no, rust_data$observed["TGTGATAAA",]))
cbind(no, rust_data$observed["TGTGATAAA",])
summary(cbind(no, rust_data$observed["TGTGATAAA",]) >= 5)
sum(rust_data$observed["TGTGATAAA",])
rust_data$observed["TGTGATAAA",]
which(rowSums(rust_data$observed[subwords3,]) < 60)
no <- rust_data$present["TCTACGGGA",] - rust_data$observed["TCTACGGGA",]
chisq.test(cbind(no, rust_data$observed["TCTACGGGA",]))
cbind(no, rust_data$observed["TCTACGGGA",])
test.rust <- function(x, words_subset = NULL, ...) {
  chitest <- function(dat, ...) {
    tryCatch(chisq.test(dat, ...)$p.value,
      warning = function(war) {
        return(NA)
      })
  }
  if (!is.null(words_subset)) {
    words <- intersect(words_subset, x$words)
  } else {
    words <- x$words
  }
  words0 <- words[rowSums(x$present[words,]) == 0]
  words <- setdiff(words, words0)
  no <- x$present[words, ] - x$observed[words, ]
  if (length(words) > 2000) {
      require(parallel)
      cores <- detectCores()
      clust <- makeCluster(cores)
      pvals <- unlist(parLapply(clust, words, function(word) {
        chitest(cbind(no[word, ], x$observed[word, ]), ...)
      }))
  stopCluster(clust)
  } else {
      pvals <- unlist(lapply(words, function(word) {
        chitest(cbind(no[word, ], x$observed[word, ]), ...)
      }))
  }
  names(pvals) <- words
  excluded <- rep(NA, length(words0))
  names(excluded) <- words0
  c(pvals, excluded)
}
subwords4 <- filter.rust(rust_data, observed_threshold=50, significance_threshold=0.01)
length(subwords4)
length(subwords3)
plot.rust(rust_data, words_subset=subwords)
dev.off()
plot.rust(rust_data, words_subset=subwords4)
dev.off()
rust_data6 <- read.rust("di_6mer/RUST_6mer_12-Jun-18_11.37")
sub6words <- filter.rust(rust_data6, observed_threshold=50, significance_threshold=0.01)
plot.rust(rust_data6)
dev.off()
plot.rust(rust_data6, words_subset=sub6words)
dv.off()
dev.off()
length(sub6words)
length(rust_data6$words)
install.packages("viridis")
library("viridis")
pal = viridis_pal(option="A")
pal(61)
a
a <- if (TRUE) 5 else 3
a
a <- "auto"
a[1]
rust_data <- read.rust("di_dipeptide/RUST_dipeptide_12-Jun-18_11.37")
apply(rust_data$ratios, 1, max)
apply(rust_data$ratios, 2, max)
apply(rust_data$ratios, c(1,2), max)
apply(rust_data$ratios, 2, max)
max(apply(rust_data$ratios, 2, max))
mean(apply(rust_data$ratios, 2, mean))
0.42/0.08
rust_data <- read.rust("di_tripeptide/RUST_tripeptide_12-Jun-18_11.37")
max(apply(rust_data$ratios, 2, max))
which(apply(rust_data$ratios, 2, max) > 0.58)
rust_data$ratios[29, "-2"]
rust_data$ratios[, "-2"]
which(apply(rust_data$ratios, 1, max) > 0.58)
rust_data$ratios[c("FWP", "KWP"), "-2"]
rust_data$expected[c("FWP", "KWP"),]
rust_data$expected[c("FWP", "KWP")]
0.583/0.086
rust_data <- read.rust("di_6mer/RUST_6mer_12-Jun-18_11.37")
max(apply(rust_data$ratios, 2, max))
which(apply(rust_data$ratios, 1, max) > 0.50)
rust_data$expected[c("GGTATT")]
rust_data$ratio[c("GGTATT"),"-1"]
rust_data$ratio[c("GGTATT"),"-2"]
rust_data$ratio[c("GGTATT"),"0"]
0.5/0.095
rust_data <- read.rust("di_9mer/RUST_9mer_12-Jun-18_11.37")
rust_data <- read.rust("di_9mer/RUST_9mer_12-Jun-18_11.37")
max(apply(rust_data$ratios, 2, max))
sub6words <- filter.rust(rust_data, observed_threshold=50, significance_threshold=0.01)
max(apply(rust_data$ratios[sub6words,], 2, max))
which(apply(rust_data$ratios[sub6words,], 1, max) > 0.72)
rust_data$expected["CTGGGAATC"]
0.73333/0.099
summary(rowSums(rust_data$observed))
hist(log(rowSums(rust_data$observed)))
dev.off()
log(1)
e
exp(4)
exp(1)
digamma(1)
-digamma(1)
getwd()
q()
file.path("aa", "bb")
dir.exists("aa")
dir.exists("codon")
dir.exists("codon/aa")
tmp <- file.path("aa", "bb")
dir.create(tmp)
dir.create(tmp, recursive=T)
dir.create(tmp, recursive=T, showWarnings=F)
library(geneticcode)
deduce_nuc_seq("GG")
source("rustr.R")
codon <- read.rust("di_codon/RUST_codon_12-Jun-18_11.37")
names(codon)
codon$expected
codon$observed
dim(codon$observed)
codon$positions
codon$observed[, "0"]
codon$expected[, "0"]
codon$present[, "0"]
codon$observed[, "0"]
summary(codon$observed[, "0"] > codon$present[, "0"])
summary(codon$observed[, "0"] < codon$present[, "0"])
summary(codon$observed < codon$present)
dipep <- read.rust("di_dipeptide/RUST_dipeptide_12-Jun-18_11.37")
dipep$words
dim(dipep$ratios)
dipep$positions
dipep$ratios[, "-1"]
data.frame(dipep$ratios[, "-1"], dipep$present[, "-1"], dipep$observed[, "-1"])
275/4753
dipep_table <- data.frame(dipep$ratios[, "-1"], dipep$present[, "-1"], dipep$observed[, "-1"])
colnames(dipep_table)
colnames(dipep_table) <- c("ratio", "present", "observed")
colnames(dipep_table)
summary(dipep_table$observed/dipep_table$present == dipep_table$ratio)
write.table(dipep_table, "dipeptide_table_by_aa.tsv", sep = "\t")
test.rust(dipep)
test.rust
write.table(dipep_table, "dipeptide_table_by_aa.tsv", sep = "\t", col.names=NA)
sixmer <- read.rust("di_6mer/RUST_6mer_12-Jun-18_11.37")
translate("ATCGCT")
sixmer_table <- data.frame(dixmer$ratios[, "-1"], sixmer$present[, "-1"], sixmer$observed[, "-1"])
sixmer_table <- data.frame(sixmer$ratios[, "-1"], sixmer$present[, "-1"], sixmer$observed[, "-1"])
dim(sixmer_table)
head(sixmer_table)
colnames(sixmer_table) <- c("ratio", "present", "observed")
sixmer$aa <- translate(rownames(sixmer_table))
rownames(sixmer_table)
summary(nchar(rownames(sixmer_table)))
translate(rownames(sixmer_table))
translate
sixmer$aa <- sapply(rownames(sixmer_table), translate)
head(sixmer$aa)
head(sixmer)
dim(sixmer)
sixmer_table$aa <- sapply(rownames(sixmer_table), translate)
head(sixmer_table)
write.table(sixmer_table, "6mer_table_by_aa.tsv", sep = "\t", col.names=NA)
head sixmer_table
head(sixmer_table)
head(sixmer_table[order(sixmer_table$aa),])
head(sixmer_table[order(sixmer_table$aa, sixmer_table$ratio),])
sixmer_table2 <- sixmer_table[order(sixmer_table$aa, sixmer_table$ratio),]
head(sixmer_table2)
aggregate(ratio ~ aa, sixmer_table2, max)
aggregate(ratio ~ aa, sixmer_table2, min)
table(sixmer_table2$aa)
rep(aggregate(ratio ~ aa, sixmer_table2, min), each = table(sixmer_table2$aa))
dim(table(sixmer_table2$aa))
dim(aggregate(ratio ~ aa, sixmer_table2, min))
dim(aggregate(ratio ~ aa, sixmer_table2, min)$ratio)
length(aggregate(ratio ~ aa, sixmer_table2, min)$ratio)
rep(aggregate(ratio ~ aa, sixmer_table2, min)$ratio, each = table(sixmer_table2$aa))
table(sixmer_table2$aa)[1]
names(table(sixmer_table2$aa)[1])
names(table(sixmer_table2$aa))
dim(rep(aggregate(ratio ~ aa, sixmer_table2, min)$ratio, each = table(sixmer_table2$aa)))
length(rep(aggregate(ratio ~ aa, sixmer_table2, min)$ratio, each = table(sixmer_table2$aa)))
dim(sixmer_table2)
length(rep(aggregate(ratio ~ aa, sixmer_table2, min)$ratio, rep = table(sixmer_table2$aa)))
length(rep(aggregate(ratio ~ aa, sixmer_table2, min)$ratio, table(sixmer_table2$aa)))
sixmer_table2$min_ratio <- rep(aggregate(ratio ~ aa, sixmer_table2, min)$ratio, table(sixmer_table2$aa))
head(sixmer_table2)
head(sixmer_table2, n = 20)
head(log2(sixmer_table2$ratio / sixmer_table2$min_ratio))
sixmer_table2$log2_fold <- log2(sixmer_table2$ratio / sixmer_table2$min_ratio)
head(sixmer_table2)
sixmer_table_sorted <- sixmer_table2[order(sixmer_table2$aa, -sixmer_table2$log2_fold),]
head(sixmer_table_sorted)
sixmer_table_final <- data.frame(aa = sixmer_table_sorted$aa, codons = row.names(sixmer_table_sorted), present = sixmer_table_sorted$present, observed = sixmer_table_sorted$observed, log2_fold = sixmer_table_sorted$log2_fold)
head(sixmer_table_final)
write.table(sixmer_table_final, "6mer_table_by_aa.tsv", sep = "\t", col.names=NA)
write.table(sixmer_table_final, "6mer_table_by_aa.tsv", sep = "\t", row.names=FALSE)
sixmer_table_final <- data.frame(aa = sixmer_table_sorted$aa, codons = row.names(sixmer_table_sorted), present = sixmer_table_sorted$present, observed = sixmer_table_sorted$observed, ratio = sixmer_table_sorted$ratio, log2_fold = sixmer_table_sorted$log2_fold)
write.table(sixmer_table_final, "6mer_table_by_aa.tsv", sep = "\t", row.names=FALSE)
getwd()
topo <- read.rust("../structure/di_topology/RUST_topology_25-Jun-18_10.14")
plot.rust(topo)
plot.rust(topo, what=c("observed", "present"))
topo$observed["Transmembrane",]
sum(topo$observed["Transmembrane",])
sum(topo$present["Transmembrane",])
484618/5465247
topo$expected["Transmembrane"]
sum(topo$present["Intramembrane",])
sum(topo$observed["Intramembrane",])
ls()
codon$words
stai <- read.table("../../extra_data/mouse_tAI_weights.txt")
head(stai)
stai <- read.table("../../extra_data/mouse_tAI_weights.txt", row.names = 1)
head(stai)
plot(codon$ratio[,"0"], stai[codon$words])
stai[codon$words]
stai[codon$words[1]]
codon$words[1]
stai["AAA"]
head(stai)
plot(codon$ratio[,"0"], stai[codon$words, "V2"])
library(stringr)
str_count(codon$words, "G")
str_count(codon$words, "C")
str_count(codon$words, "G") + str_count(codon$words, "C")
codon_gc <- str_count(codon$words, "G") + str_count(codon$words, "C")
plot(codon$ratio[,"0"], codon_gc)
lm(codon$ratio[,"0"] ~  codon_gc)
summary(lm(codon$ratio[,"0"] ~  codon_gc))
summary(lm(codon$ratio[,"0"] ~  stai[codon$words,"V2"]))
quantile(stai$V2, probs = seq(0,1,1/7))
which(stai$V2 <= 0.07688688)
which(stai$V2 > 0.07688688 and stai$V2 <= 0.10335498)
which(stai$V2 > 0.07688688 && stai$V2 <= 0.10335498)
which(stai$V2 > 0.07688688 & stai$V2 <= 0.10335498)
length(codon$words)
4^3
summary(lm(codon$ratio[,"0"] ~  stai[codon$words,"V2"]))
summary(lm(codon$ratio[,"-1"] ~  stai[codon$words,"V2"]))
summary(lm(codon$ratio[,"-15"] ~  stai[codon$words,"V2"]))
summary(lm(codon$ratio[,"-16"] ~  stai[codon$words,"V2"]))
summary(lm(codon$ratio[,"-17"] ~  stai[codon$words,"V2"]))
summary(lm(codon$ratio[,"0"] ~  stai[codon$words,"V2"]))
summary(lm(codon$ratio[,"-1"] ~  stai[codon$words,"V2"]))
stai[codon$words, "V2"]
stai[, "V2"]
summary(lm(codon$ratio[,"-1"] ~  stai[codon$words,"V2"]))
stai <- read.table("../../extra_data/mouse_stAI_weights.txt", row.names = 1)
head(stai)
stai <- read.table("../../extra_data/mouse_stAI_weights.txt", row.names = 1, header = T)
head(stai)
tai <- read.table("../../extra_data/mouse_tAI_weights.txt", row.names = 1)
head(tai)
plot(tai, stai)
plot(tai$V2, stai$wi)
dim(tai)
dim(stai)
plot(tai[codons$words, "V2"], stai[codons$words, "wi"])
plot(tai[codon$words, "V2"], stai[codon$words, "wi"])
summary(lm(codon$ratio[,"-1"] ~  stai[codon$words,"wi"]))
summary(lm(codon$ratio[,"0"] ~  stai[codon$words,"wi"]))
summary(lm(codon$ratio[,"-1"] ~  stai[codon$words,"wi"]))
summary(lm(codon$ratio[,"-15"] ~  stai[codon$words,"wi"]))
summary(lm(codon$ratio[,"-16"] ~  stai[codon$words,"wi"]))
quantile(stai$wi, probs = seq(0,1,1/7))
cut(stai$wi, breaks=quantile(stai$wi, probs = seq(0,1,1/7)))
stai[11,]
stai[12,]
quantile(stai$wi, probs = seq(0,1,1/7))
cut(stai$wi, breaks=quantile(stai$wi, probs = seq(0,1,1/7))[1:7])
cut(stai$wi, breaks=quantile(stai$wi, probs = seq(0,1,1/7)))
breaks=quantile(stai$wi, probs = seq(0,1,1/7))
breaks
breaks[1] = 0
breaks
cut(stai$wi, breaks=breaks)
table(cut(tai$wi, breaks=breaks))
stai$cat <- cut(stai$wi, breaks=breaks)
head(stai)
stai$cat <- as.numeric(cut(stai$wi, breaks=breaks))
head(stai)
summary(lm(codon$ratio[,"-1"] ~  stai[codon$words,"cat"]))
summary(lm(codon$ratio[,"0"] ~  stai[codon$words,"cat"]))
summary(lm(codon$ratio[,"0"] ~  stai[codon$words,"wi"]))
summary(lm(codon$ratio[,"0"] ~  stai[codon$words,"cat"]))
summary(lm(codon$ratio[,"-1"] ~  stai[codon$words,"cat"]))
breaks.tai=quantile(tai$V2, probs = seq(0,1,1/7))
breaks.tai[1] = 0
tai$cat <- cut(tai$V2, breaks=breaks.tai)
summary(tai)
summary(lm(codon$ratio[,"0"] ~  stai[codon$words,"cat"]))
summary(lm(codon$ratio[,"0"] ~  tai[codon$words,"cat"]))
tai$cat <- as.numeric(cut(tai$V2, breaks=breaks.tai))
summary(lm(codon$ratio[,"0"] ~  tai[codon$words,"cat"]))
summary(lm(codon$ratio[,"-1"] ~  tai[codon$words,"cat"]))
summary(lm(codon$ratio[,"-1"] ~  stai[codon$words,"cat"]))
summary(lm(codon$ratio[,"0"] ~  tai[codon$words,"cat"]))
summary(lm(codon$ratio[,"0"] ~  stai[codon$words,"cat"]))
summary(lm(codon$ratio[,"0"] ~  stai[codon$words,"wi"]))
summary(lm(codon$ratio[,"-1"] ~  stai[codon$words,"wi"]))
summary(lm(codon$ratio[,"-1"] ~  tai[codon$words,"V2"]))
summary(lm(codon$ratio[,"0"] ~  tai[codon$words,"V2"]))
di.stai <- read.rust("../codon_usage/di_codon_stai/RUST_codon_stai_22-Jun-18_10.09")
di.stai$words
aggregate(wi ~ cat, stai)
aggregate(wi ~ cat, stai, mean)
stai_means <- aggregate(wi ~ cat, stai, mean)
plot(di.stai$ratios[,"0"], stai_means[di.stai$words, "wi"])
plot(di.stai$ratios[,"-1"], stai_means[di.stai$words, "wi"])
plot(stai_means[di.stai$words, "wi"], di.stai$ratios[,"-1"])
di.stai$ratios
di.stai$ratios[,"-1"]
di.stai$ratios[,"-1"]/di.stai$expected
plot(stai_means[di.stai$words, "wi"], di.stai$ratios[,"-1"]/di.stai$expected)
plot(stai_means[di.stai$words, "wi"], di.stai$ratios[,"9"]/di.stai$expected)
plot(stai_means[di.stai$words, "wi"], di.stai$ratios[,"0"]/di.stai$expected)
plot(stai_means[di.stai$words, "wi"], di.stai$ratios[,"-1"]/di.stai$expected)
plot(stai_means[di.stai$words, "wi"], di.stai$ratios[,"-15"]/di.stai$expected)
plot(stai_means[di.stai$words, "wi"], di.stai$ratios[,"-16"]/di.stai$expected)
getwd()
q()
head(sixmer_table_final)
head(sixmer_table_final)
head(dipep_table)
2306/32341
dipep$expected
dipep$expected["AA"]
2306/32341
dim(dipep_table)
dim(sixmer_table)
head(dipep_table)
head(sixmer_table)
head(sixmer_table_final)
dim(sixmer_table_final)
head(sixmer_table)
dim(sixmer_table)
head(sixmer_table_final)
head(dipep$expected)
head(dipep_table)
source("rustr.R")
plot.rust
head(dipep_table)
dipep_table$observed/dipep_table$present
dipep_table$observed/dipep_table$present == dipep$ratios
head(dipep$ratios)
head(dipep$ratios[,"-1"])
dipep_table$observed/dipep_table$present == dipep$ratios[,"-1"]
(dipep_table$observed/dipep_table$present) / dipep$expected
dipep$enrichment <- (dipep_table$observed/dipep_table$present) / dipep$expected
names(dipep)
dipep_table$enrichment <- (dipep_table$observed/dipep_table$present) / dipep$expected
head(dipep_table)
head(sixmer_table_final)
aggregate(log2_fold ~ aa, sixmer_table_final, max)
aggregate(log2_fold ~ aa, sixmer_table_final, max)$aa == dipep_table$aa
aggregate(log2_fold ~ aa, sixmer_table_final, max)$aa == row.names(dipep_table)
aggregate(log2_fold ~ aa, sixmer_table_final, max)$log2_fold
dipep_table$max_fold <- aggregate(log2_fold ~ aa, sixmer_table_final, max)$log2_fold
head(dipep_table)
library(corrplot)
install.packages("corrplot")
library(corrplot)
head(dipep_table)
rownames(dipep_table)
strsplit(rownames(dipep_table))
strsplit(rownames(dipep_table),split=1)
substr(rownames(dipep_table), start=1, stop=1)
dipep_table$P <- substr(rownames(dipep_table), start=1, stop=1)
dipep_table$A <- substr(rownames(dipep_table), start=2, stop=2)
head(dipep_table)
dim(dipep_table)
sqrt(400)
enrichment_matrix <- matrix(dipep_table$enrichment, nrow=20, ncol=20, byrow=TRUE)
head(enrichment_matrix)
enrichment_matrix[1:5, 1:5]
head(dipep_table)
row.names(enrichment_matrix) <- dipep_table$P
row.names(enrichment_matrix) <- dipep_table$A
row.names(enrichment_matrix) <- dipep_table$A[1:20]
col.names(enrichment_matrix) <- dipep_table$A[1:20]
colnames(enrichment_matrix) <- dipep_table$A[1:20]
head(enrichment_matrix)
head(dipep_table)
fold_matrix <- matrix(dipep_table$enrichment, nrow=20, ncol=20, byrow=TRUE)
colnames(fold_matrix) <- dipep_table$A[1:20]
rownames(fold_matrix) <- dipep_table$A[1:20]
head(fold_matrix)
corrplot(enrichment_matrix, is.corr=F)
pdf("cortest.pdf")
corrplot(enrichment_matrix, is.corr=F)
dev.off()
pdf("cortest.pdf")
corrplot(fold_matrix, is.corr=F)
dev.off()
fold_matrix <- matrix(dipep_table$max_fold, nrow=20, ncol=20, byrow=TRUE)
head(fold_matrix)
rownames(fold_matrix) <- dipep_table$A[1:20]
colnames(fold_matrix) <- dipep_table$A[1:20]
pdf("cortest.pdf")
corrplot(fold_matrix, is.corr=F)
dev.off()
triangles <- function(x, y = NULL, weights, col_weights = NULL,
                      xlab = NULL, ylab = NULL) {
    draw_grid <- function(coords, fg) {
        symbols(coords, add = TRUE, inches = FALSE, fg = fg, bg = NA,
        rectangles = matrix(1, nrow = nrow(coords), ncol = 2))
    }
    draw_triangle <- function(x, y, radius, col = NA) {
        polygon(x = c(x, x - sqrt(3) * radius / 2, x + sqrt(3) * radius / 2),
                y = c(y - radius, y + radius / 2, y + radius / 2),
                col = col)
    }
    # calculation of radii and direction of triangles
    areas = abs(weights)
    norm_factor <- area_from_radius(0.5) / max(areas)
    norm_area = areas * norm_factor
    radii <- sign(weights) * as.numeric(apply(norm_area, c(1,2), radius_from_area))
    # calculation of color gradient
    pal = colorRampPalette(c("white", "blue"))
    cols = pal(255)
    col_step = (255 - 1) / (max(col_weights) - min(col_weights))
    col_i = round((col_weights - min(col_weights)) * col_step) + 1
    # calculation of coordinates and plotting
    coords <- xy.coords(x = x, y = y, xlab = xlab, ylab = ylab, log = "",
                        recycle = FALSE, setLab = TRUE)
    plot.new()
    plot.window(xlim = c(0.5, max(coords$x) + 0.5), ylim = c(max(coords$y) + 0.5, 0.5),
                log = "", asp = 1, xaxs = "i", yaxs = "i")
    for (i in 1:length(coords$x)) {
        draw_triangle(coords$x[i], coords$y[i], radii[i], cols[col_i[i]])
    }
    axis(3, 1:max(coords$x), colnames(weights), tick = FALSE)
    axis(2, 1:max(coords$y), rownames(weights), tick = FALSE)
    colorlegend(colbar = colbar, labels = round(labels, 2),
                offset = cl.offset, ratio.colbar = 0.3, cex = cl.cex,
                xlim = xlim, ylim = ylim, vertical = vertical,
                align = cl.align.text)
    draw_grid(coords, "lightgray")
}
area_from_height <- function(h) h**2 / sqrt(3)
radius_from_area <- function(A) 2 * sqrt(A) / sqrt(3 * sqrt(3))
area_from_radius <- function(r) area_from_height(3 * r / 2)
pdf("test.pdf")
coords <- data.frame(x = rep(1:20, each = 20), y = rep(1:20, 20))
triangles(coords, weights = enrichment_matrix, col_weights = fold_matrix)
triangles <- function(x, y = NULL, weights, col_weights = NULL,
                      xlab = NULL, ylab = NULL) {
    draw_grid <- function(coords, fg) {
        symbols(coords, add = TRUE, inches = FALSE, fg = fg, bg = NA,
        rectangles = matrix(1, nrow = nrow(coords), ncol = 2))
    }
    draw_triangle <- function(x, y, radius, col = NA) {
        polygon(x = c(x, x - sqrt(3) * radius / 2, x + sqrt(3) * radius / 2),
                y = c(y - radius, y + radius / 2, y + radius / 2),
                col = col)
    }
    # calculation of radii and direction of triangles
    areas = abs(weights)
    norm_factor <- area_from_radius(0.5) / max(areas)
    norm_area = areas * norm_factor
    radii <- sign(weights) * as.numeric(apply(norm_area, c(1,2), radius_from_area))
    # calculation of color gradient
    pal = colorRampPalette(c("white", "blue"))
    cols = pal(255)
    col_step = (255 - 1) / (max(col_weights) - min(col_weights))
    col_i = round((col_weights - min(col_weights)) * col_step) + 1
    # calculation of coordinates and plotting
    coords <- xy.coords(x = x, y = y, xlab = xlab, ylab = ylab, log = "",
                        recycle = FALSE)
    plot.new()
    plot.window(xlim = c(0.5, max(coords$x) + 0.5), ylim = c(max(coords$y) + 0.5, 0.5),
                log = "", asp = 1, xaxs = "i", yaxs = "i")
    for (i in 1:length(coords$x)) {
        draw_triangle(coords$x[i], coords$y[i], radii[i], cols[col_i[i]])
    }
    axis(3, 1:max(coords$x), colnames(weights), tick = FALSE)
    axis(2, 1:max(coords$y), rownames(weights), tick = FALSE)
    colorlegend(colbar = colbar, labels = round(labels, 2),
                offset = cl.offset, ratio.colbar = 0.3, cex = cl.cex,
                xlim = xlim, ylim = ylim, vertical = vertical,
                align = cl.align.text)
    draw_grid(coords, "lightgray")
}
triangles(coords, weights = enrichment_matrix, col_weights = fold_matrix)
triangles <- function(x, y = NULL, weights, col_weights = NULL,
                      xlab = NULL, ylab = NULL) {
    draw_grid <- function(coords, fg) {
        symbols(coords, add = TRUE, inches = FALSE, fg = fg, bg = NA,
        rectangles = matrix(1, nrow = nrow(coords), ncol = 2))
    }
    draw_triangle <- function(x, y, radius, col = NA) {
        polygon(x = c(x, x - sqrt(3) * radius / 2, x + sqrt(3) * radius / 2),
                y = c(y - radius, y + radius / 2, y + radius / 2),
                col = col)
    }
    # calculation of radii and direction of triangles
    areas = abs(weights)
    norm_factor <- area_from_radius(0.5) / max(areas)
    norm_area = areas * norm_factor
    radii <- sign(weights) * as.numeric(apply(norm_area, c(1,2), radius_from_area))
    # calculation of color gradient
    pal = colorRampPalette(c("white", "blue"))
    cols = pal(255)
    col_step = (255 - 1) / (max(col_weights) - min(col_weights))
    col_i = round((col_weights - min(col_weights)) * col_step) + 1
    # calculation of coordinates and plotting
    coords <- xy.coords(x = x, y = y, xlab = xlab, ylab = ylab, log = "",
                        recycle = FALSE)
    plot.new()
    plot.window(xlim = c(0.5, max(coords$x) + 0.5), ylim = c(max(coords$y) + 0.5, 0.5),
                log = "", asp = 1, xaxs = "i", yaxs = "i")
    for (i in 1:length(coords$x)) {
        draw_triangle(coords$x[i], coords$y[i], radii[i], cols[col_i[i]])
    }
    axis(3, 1:max(coords$x), colnames(weights), tick = FALSE)
    axis(2, 1:max(coords$y), rownames(weights), tick = FALSE)
    # colorlegend(colbar = colbar, labels = round(labels, 2),
    #            offset = cl.offset, ratio.colbar = 0.3, cex = cl.cex,
    #            xlim = xlim, ylim = ylim, vertical = vertical,
    #            align = cl.align.text)
    draw_grid(coords, "lightgray")
}
triangles(coords, weights = enrichment_matrix, col_weights = fold_matrix)
coords
head(coords)
triangles(coords, weights = enrichment_matrix, col_weights = fold_matrix)
matrix(1, nrow=nrow(coords), ncol = 2)
triangles(coords, weights = enrichment_matrix, col_weights = fold_matrix)
dim(coords)
dim(enrichment_matrix)
dim(fold_matrix)
triangles <- function(x, y = NULL, weights, col_weights = NULL,
                      xlab = NULL, ylab = NULL) {
    draw_grid <- function(coords, fg) {
        symbols(coords, add = TRUE, inches = FALSE, fg = fg, bg = NA,
        rectangles = matrix(1, nrow = length(coords$x), ncol = 2))
    }
    draw_triangle <- function(x, y, radius, col = NA) {
        polygon(x = c(x, x - sqrt(3) * radius / 2, x + sqrt(3) * radius / 2),
                y = c(y - radius, y + radius / 2, y + radius / 2),
                col = col)
    }
    # calculation of radii and direction of triangles
    areas = abs(weights)
    norm_factor <- area_from_radius(0.5) / max(areas)
    norm_area = areas * norm_factor
    radii <- sign(weights) * as.numeric(apply(norm_area, c(1,2), radius_from_area))
    # calculation of color gradient
    pal = colorRampPalette(c("white", "blue"))
    cols = pal(255)
    col_step = (255 - 1) / (max(col_weights) - min(col_weights))
    col_i = round((col_weights - min(col_weights)) * col_step) + 1
    # calculation of coordinates and plotting
    coords <- xy.coords(x = x, y = y, xlab = xlab, ylab = ylab, log = "",
                        recycle = FALSE)
    plot.new()
    plot.window(xlim = c(0.5, max(coords$x) + 0.5), ylim = c(max(coords$y) + 0.5, 0.5),
                log = "", asp = 1, xaxs = "i", yaxs = "i")
    for (i in 1:length(coords$x)) {
        draw_triangle(coords$x[i], coords$y[i], radii[i], cols[col_i[i]])
    }
    axis(3, 1:max(coords$x), colnames(weights), tick = FALSE)
    axis(2, 1:max(coords$y), rownames(weights), tick = FALSE)
    # colorlegend(colbar = colbar, labels = round(labels, 2),
    #            offset = cl.offset, ratio.colbar = 0.3, cex = cl.cex,
    #            xlim = xlim, ylim = ylim, vertical = vertical,
    #            align = cl.align.text)
    draw_grid(coords, "lightgray")
}
triangles(coords, weights = enrichment_matrix, col_weights = fold_matrix)
dev.off()
rownames(enrichment_matrix)
head(enrichment_matrix)
enrichment_matrix <- matrix(log2(dipep_table$enrichment), nrow=20, ncol=20, byrow=TRUE)
pdf("test.pdf")
triangles(coords, weights = enrichment_matrix, col_weights = fold_matrix)
dev.off()
rownames(enrichment_matrix) <- dipep_table$A[1:20]
colnames(enrichment_matrix) <- dipep_table$A[1:20]
rownames(enrichment_matrix) <- dipep_table$P[1:20]
head(enrichment_matrix)
pdf("test.pdf")
triangles(coords, weights = enrichment_matrix, col_weights = fold_matrix)
dev.off()
colnames(enrichment_matrix) <- dipep_table$P[1:20]
head(enrichment_matrix)
colnames(enrichment_matrix) <- dipep_table$A[1:20]
rownames(enrichment_matrix) <- dipep_table$A[1:20]
head(enrichment_matrix)
pdf("test.pdf")
triangles(coords, weights = enrichment_matrix, col_weights = fold_matrix)
dev.off()
ratio_matrix <- matrix(dipep_table$ratio, nrow=20, ncol=20, byrow=TRUE)
colnames(ratio_matrix) <- dipep_table$A[1:20]
rownames(ratio_matrix) <- dipep_table$A[1:20]
pdf("ratio_test.pdf")
corrplot(ratio_matrix, is.corr=F)
dev.off()
pdf("ratio_test.pdf")
corrplot(ratio_matrix, is.corr=F, col="red")
dev.off()
col <- colorRampPalette(c("#67001F", "#B2182B", "#D6604D", "#F4A582",
                              "#FDDBC7", "#FFFFFF", "#D1E5F0", "#92C5DE",
"#4393C3", "#2166AC", "#053061"))(200)
col
min(fold_matrix)
min(max_matrix)
max(fold_matrix)
col_step = (200 - 1) / (max(fold_matrix) - min(fold_matrix))
col_step
col_i = round((fold_matrix - min(fold_matrix)) * col_step) + 1
col_i
pal[col_i]
pal[as.numeric(col_i)]
pal
col[col_i]
pdf("ratio_test.pdf")
corrplot(ratio_matrix, is.corr=F, col=col[col_i])
dev.off()
pdf("ratio_test.pdf")
corrplot(ratio_matrix, is.corr=F, col=as.numeric(col[col_i]))
dev.off8)
dev.off()
pdf("ratio_test.pdf")
corrplot(ratio_matrix, is.corr=F, col=col[as.numeric(col_i)])
as.numeric(col_i)
col_i
dev.off()
save(triangles, area_from_height, area_from_radius, radius_from_area, file = "triangle.R")
save(triangles, area_from_height, area_from_radius, radius_from_area, file = "triangle.RData")
save(triangles, area_from_height, area_from_radius, radius_from_area, enrichment_matrix, ratio_matrix, fold_matrix, file = "triangle.RData")
corrplot(ratio_matrix, is.corr=F, col=col[as.numeric(col_i)])
getwd()
source("matrix.plot.R")
pdf("circle_test.pdf")
matrix.plot(weights = ratio_matrix, col_weights = fold_matrix, type = "circle")
dev.off()
source("matrix.plot.R")
pdf("circle_test.pdf", height=8, width=10)
matrix.plot(weights = ratio_matrix, col_weights = fold_matrix, type = "circle")
dev.off()
head(dipep_table)
enrichment_log_matrix <- matrix(log2(dipep_table$enrichment), nrow=20, ncol=20, byrow=TRUE)
rownames(enrichment_log_matrix) <- dipep_table$A[1:20]
colnames(enrichment_log_matrix) <- dipep_table$A[1:20]
enrichment_matrix <- matrix(dipep_table$enrichment, nrow=20, ncol=20, byrow=TRUE)
rownames(enrichment_matrix) <- dipep_table$A[1:20]
colnames(enrichment_matrix) <- dipep_table$A[1:20]
head(enrichment_matrix)
pdf("circle_enrich_test.pdf", height=8, width=10)
matrix.plot(weights = enrichment_matrix, col_weights = fold_matrix, type = "circle")
dev.off()
head(dipep_table)
source("matrix.plot.R")
pdf("circle_enrich_test2.pdf", height=8, width=10)
matrix.plot(weights = enrichment_matrix, col_weights = fold_matrix, type = "circle")
dev.off()
source("matrix.plot.R")
pdf("circle_enrich_test3.pdf", height=8, width=10)
matrix.plot(weights = enrichment_matrix, col_weights = fold_matrix, type = "circle")
dev.off()
source("matrix.plot.R")
pdf("circle_enrich_test4.pdf", height=8, width=10)
matrix.plot(weights = enrichment_matrix, col_weights = fold_matrix, type = "circle")
dev.off()
pdf("circle_enrich_test5.pdf", height=8, width=10)
source("matrix.plot.R")
source("matrix.plot.R")
matrix.plot(weights = enrichment_matrix, col_weights = fold_matrix, type = "circle", pal_cols=viridis(5), pal_size=100)
viridis(5)
library(viridis)
matrix.plot(weights = enrichment_matrix, col_weights = fold_matrix, type = "circle", pal_cols=viridis(5), pal_size=100)
dev.off()
pdf("Fig_dipeptide_enrichment_matrix.pdf", height=8, width=10)
matrix.plot(weights = enrichment_matrix, col_weights = fold_matrix, type = "circle", pal_cols=RColorBrewer::brewer.pal(4, "PuOr"), pal_size=100)
dev.off()
q()
head(enrichment_matrix)
head(dipep_table)
2306/32341
log(2306/32341)
order(dipep_table$enrichment)
plot(order(dipep_table$enrichment), order(dipep$observed /dipep$present))
dim(dipep)
plot(order(dipep_table$enrichment), order(dipep_table$observed /dipep_table$present))
head(dipep_table)
tripep <- read.rust("di_tripeptide/RUST_tripeptide_12-Jun-18_11.37")
tripep$ratios["PPP",]
tripep$ratios["PPP",] / tripep$expected["PPP"]
tripep$observed["PPP",]
tripep$present["PPP",]
tripep$present["PPE",]
tripep$ratios["PPE",] / tripep$expected["PPE"]
plot.rust(tripep, words_subset=c("PPP", "PPE", "PPD", "PGD", "PGE"), normalized = T)
plot.rust(tripep, words_subset=c("PPP", "PPE", "PPD", "PGD", "PGE", "QGD"), normalized = T)
library(geneticcode)
q()
library(geneticcode)
deduce_nuc_seq("PPE")
k9mer <- read.rust("di_9mer/RUST_9mer_12-Jun-18_11.37")
plot.rust(k9mer, words_subset=deduce_nuc_seq("PPE"), normalize=T, filter)
di9mer.filtered.words <- filter.rust(k9mer, observed_threshold=60, significance_threshold=0.01)
length(di9mer.filtered.words)
ppe.filtered <- intersect(deduce_nuc_seq("PPE"), di9mer.filtered.words)
length(ppe.filtered)
k9mer$observed[deduce_nuc_seq("PPE"),]
plot.rust(tripep, words_subset=c("GPP", "DPP", "PPP", "SPP", "PPG", "PPA", "PPV", "PPE", "PPD", "APP", "MPP"), normalized = T)
plot.rust(tripep, words_subset=c("GPP", "DPP", "PPP", "SPP", "PPG", "PPA", "PPV", "PPE", "PPD", "APP", "MPP"), normalized = T)
library("RColorBrewer")
display.brewer.all()
plot.rust(tripep, words_subset=c("GPP", "DPP", "PPP", "SPP", "PPG", "PPA", "PPV", "PPE", "PPD", "APP", "MPP"), normalized = T, col=brewer.pal("paired", n=11))
plot.rust(tripep, words_subset=c("GPP", "DPP", "PPP", "SPP", "PPG", "PPA", "PPV", "PPE", "PPD", "APP", "MPP"), normalized = T, col=brewer.pal("Paired", n=11))
plot.rust(tripep, words_subset=c("GPP", "DPP", "PPP", "SPP", "PPG", "PPA", "PPV", "PPE", "PPD", "APP", "MPP"), normalized = T, col=brewer.pal("Paired", n=12))
abline(h=c(-2,-1,0), lty=2)
abline(v=c(-2,-1,0), lty=2)
green.signatures <- c("GPP", "DPP", "PPP", "SPP", "PPG", "PPA", "PPV", "PPE", "PPD", "APP", "MPP")
tripep$observed[green.signatures,
]
plot.rust(tripep, words_subset=c("GPP", "DPP", "PPP", "SPP", "PPG", "PPA", "PPV", "PPE", "PPD", "APP", "MPP"), normalized = T, col=brewer.pal("Paired", n=12)[-11])
pdf("proline_rich_pause_tripeptides.pdf")
plot.rust(tripep, words_subset=c("GPP", "DPP", "PPP", "SPP", "PPG", "PPA", "PPV", "PPE", "PPD", "APP", "MPP"), normalized = T, col=brewer.pal("Paired", n=12)[-11])
dev.off()
tripep[green.signatures,"-2"]
tripep$ratios/tripep$expected
tri.filtered.words <- filter.rust(tripep, observed_threshold=60, significance_threshold=0.01)
length(tri.filtered.words)
length(tripep$words)
summary(green.signatures %in% tri.filtered.words)
which(!green.signatures %in% tri.filtered.words)
green.signatures[11]
tripep$observed["MPP"]
tripep$observed["MPP",]
tripep$present["MPP",]
filter.rust
summary(tripep$frequency)
tri.filtered.words <- filter.rust(tripep, observed_threshold=50, frequency_threshold=120, significance_threshold=0.01)
summary(green.signatures %in% tri.filtered.words)
length(tri.filtered.words)
tri.filtered.words <- filter.rust(tripep, frequency_threshold=120, significance_threshold=0.01)
length(tri.filtered.words)
summary(green.signatures %in% tri.filtered.words)
tripep$frequency["MPP"]
tripep$frequency
head(tripep$frequency)
tripep$frequency$counts["MPP"]
tripep$frequency["MPP",]
summary(green.signatures %in% tri.filtered.words)
green.signatures %in% tri.filtered.words
green.signatures
filter.rust
quantile(tripep$frequency$counts, 0.05)
tri.filtered.words <- filter.rust(tripep, frequency_threshold=120, significance_threshold=0.01)
green.signatures %in% tri.filtered.words
tripep$enrichment <- tripep$ratios / tripep$expected
head(tripep$enrichment)
summary(tripep$enrichment[, "-2"])
summary(tripep$enrichment[, "-2"] > 2)
summary(tripep$enrichment[tri.filtered.words, "-2"] > 2)
m2f <- tri.filtered.words[tripep$enrichment[tri.filtered.words, "-2"] > 2]
length(m2f)
plot.rust(tripep, words_subset=m2f, normalized=T)
tripep$enrichment[green.signatures]
tripep$enrichment[green.signatures,"-2"]
head(dipep_table)
summary(dipep_table$enrichment)
summary(dipep_table$enrichment>2)
hidi <- rownames(dipep_table)[dipep_table$enrichment>2]
hidi
head(m2f)
substring(m2f,2,3)
which(substring(m2f,2,3) %in% hidi)
summary(substring(m2f,2,3) %in% hidi)
no.hidi.m2f <- m2f[which(!substring(m2f,2,3) %in% hidi)]
no.hidi.m2f
tripep$enrichment[no.hidi.m2f,"-2"]
max(tripep$enrichment[no.hidi.m2f,"-2"])
which(tripep$enrichment[no.hidi.m2f,"-2"])>4.5)
which(tripep$enrichment[no.hidi.m2f,"-2"]>4.5)
tripep$observed["LQP",]
tripep$present["LQP",]
plot.rust(tripep, words_subset=no.hidi.m2f, normalized=T)
plot.rust(tripep, words_subset=c("LQP", "PPE"), normalized=T)
abline(v=-2, lty=2)
plot.rust(tripep, words_subset=c("LQP", green.signatures), normalized=T)
abline(v=-2, lty=2)
getwd()
q()
